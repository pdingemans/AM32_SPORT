[platformio]
; Global project settings
default_envs = at32f415
description = AM32 Multi-Rotor ESC Firmware
extra_configs = 
    boards/*.ini

; Global settings for all environments
[env]
platform = ststm32
framework = stm32cube
monitor_speed = 115200
upload_protocol = stlink

; Common build flags
build_flags = 
    -std=c99
    -fsingle-precision-constant
    -fomit-frame-pointer
    -ffast-math
    -g3
    -O3
    -ffunction-sections
    -Wall
    -Wundef
    -Wextra
    -Wno-unused-parameter
    --specs=nosys.specs
    --specs=nano.specs
    -Wl,--gc-sections
    -Wl,--print-memory-usage

; Common include directories
build_src_filter = 
    +<*>
    +<../Src/*>

; Common libraries
lib_deps = 

; Source file filters for different MCU families
[src_filter_common]
build_src_filter = 
    +<../Src/*.c>
    +<../Src/DroneCAN/*.c>

; ============================================================================
; STM32F0xx Family (F031, F051)
; ============================================================================
[env:f051]
extends = env, src_filter_common
board = disco_f051r8
build_flags = 
    ${env.build_flags}
    -DSTM32F051x8
    -DHSE_VALUE=8000000
    -DHSE_STARTUP_TIMEOUT=100
    -DLSE_STARTUP_TIMEOUT=5000
    -DLSE_VALUE=32768
    -DLSI_VALUE=40000
    -DHSI_VALUE=8000000
    -DUSE_FULL_LL_DRIVER
    -I Inc
    -I Mcu/f051/Inc
    ; Use AIKON20X20_F051 as default target for base F051 build
    -DAIKON20X20_F051
    ; Define M_PI for mathematical calculations
    -DM_PI=3.14159265358979323846
build_src_filter = 
    ${src_filter_common.build_src_filter}
    +<../Mcu/f051/Src/*.c>
    +<../Mcu/f051/Startup/*.s>
    ; Exclude conflicting HAL driver files - use framework versions instead
    -<../Mcu/f051/Drivers/STM32F0xx_HAL_Driver/Src/>
lib_extra_dirs = 
    Mcu/f051/Drivers
extra_scripts = 
    scripts/generate_targets.py

[env:f031]
extends = env, src_filter_common
board = nucleo_f031k6
build_flags = 
    ${env.build_flags}
    -DSTM32F031x6
    -DHSE_VALUE=8000000
    -DHSE_STARTUP_TIMEOUT=100
    -DLSE_STARTUP_TIMEOUT=5000
    -DLSE_VALUE=32768
    -DLSI_VALUE=40000
    -DHSI_VALUE=8000000
    -DUSE_FULL_LL_DRIVER
    -I Inc
    -I Mcu/f031/Inc
    ; Use REF_F031 as default target for base F031 build
    -DREF_F031
    ; Define M_PI for mathematical calculations
    -DM_PI=3.14159265358979323846
build_src_filter = 
    ${src_filter_common.build_src_filter}
    +<../Mcu/f031/Src/*.c>
    +<../Mcu/f031/Startup/*.s>
    ; Exclude conflicting HAL driver files - use framework versions instead
    -<../Mcu/f031/Drivers/STM32F0xx_HAL_Driver/Src/>

; ============================================================================
; STM32G0xx Family (G031, G071)
; ============================================================================
[env:g071]
extends = env, src_filter_common
board = nucleo_g071rb
build_flags = 
    ${env.build_flags}
    -DSTM32G071xx
    -DHSE_VALUE=8000000
    -DHSE_STARTUP_TIMEOUT=100
    -DLSE_STARTUP_TIMEOUT=5000
    -DLSE_VALUE=32768
    -DLSI_VALUE=32000
    -DHSI_VALUE=16000000
    -DUSE_FULL_LL_DRIVER
    -I Inc
    -I Mcu/g071/Inc
    ; Use AIKON_PRO_G071 as default target for base G071 build
    -DAIKON_PRO_G071
    ; Define M_PI for mathematical calculations
    -DM_PI=3.14159265358979323846
build_src_filter = 
    ${src_filter_common.build_src_filter}
    +<../Mcu/g071/Src/*.c>
    +<../Mcu/g071/Startup/*.s>
    ; Exclude conflicting HAL driver files - use framework versions instead
    -<../Mcu/g071/Drivers/STM32G0xx_HAL_Driver/Src/>
    ; Exclude local system file that conflicts with framework version
    -<../Mcu/g071/Src/system_stm32g0xx.c>

[env:g031]
extends = env, src_filter_common
board = nucleo_g031k8
build_flags = 
    ${env.build_flags}
    -DSTM32G031xx
    -DHSE_VALUE=8000000
    -DHSE_STARTUP_TIMEOUT=100
    -DLSE_STARTUP_TIMEOUT=5000
    -DLSE_VALUE=32768
    -DLSI_VALUE=32000
    -DHSI_VALUE=16000000
    -DUSE_FULL_LL_DRIVER
    -I Inc
    -I Mcu/g031/Inc
    ; Use GEN_G031 as default target for base G031 build
    -DGEN_G031
    ; Define M_PI for mathematical calculations
    -DM_PI=3.14159265358979323846
build_src_filter = 
    ${src_filter_common.build_src_filter}
    +<../Mcu/g031/Src/*.c>
    +<../Mcu/g031/Startup/*.s>
    ; Exclude conflicting HAL driver files - use framework versions instead
    -<../Mcu/g031/Drivers/STM32G0xx_HAL_Driver/Src/>
    ; Exclude local system file that conflicts with framework version
    -<../Mcu/g031/Src/system_stm32g0xx.c>

; ============================================================================
; STM32G4xx Family (G431)
; ============================================================================
[env:g431]
extends = env, src_filter_common
board = nucleo_g431kb
build_flags = 
    ${env.build_flags}
    -DSTM32G431xx
    -DHSE_VALUE=8000000
    -DHSE_STARTUP_TIMEOUT=100
    -DLSE_STARTUP_TIMEOUT=5000
    -DLSE_VALUE=32768
    -DLSI_VALUE=32000
    -DHSI_VALUE=16000000
    -DUSE_FULL_LL_DRIVER
    -I Inc
    -I Mcu/g431/Inc
    ; Use REF_G431 as default target for base G431 build
    -DREF_G431
    ; Define M_PI for mathematical calculations
    -DM_PI=3.14159265358979323846
build_src_filter = 
    ${src_filter_common.build_src_filter}
    +<../Mcu/g431/Src/*.c>
    ; Exclude local startup file (framework provides one)
    -<../Mcu/g431/Startup/*.s>
    ; Exclude conflicting HAL driver files - use framework versions instead
    -<../Mcu/g431/Drivers/STM32G4xx_HAL_Driver/Src/>
    ; Exclude local system file that conflicts with framework version
    -<../Mcu/g431/Src/system_stm32g4xx.c>

; ============================================================================
; STM32L4xx Family (L431)
; ============================================================================
[env:l431]
extends = env, src_filter_common
board = nucleo_l431kc
build_flags = 
    ${env.build_flags}
    -DSTM32L431xx
    -DHSE_VALUE=8000000
    -DHSE_STARTUP_TIMEOUT=100
    -DLSE_STARTUP_TIMEOUT=5000
    -DLSE_VALUE=32768
    -DLSI_VALUE=32000
    -DHSI_VALUE=16000000
    -DUSE_FULL_LL_DRIVER
    -I Inc
    -I Mcu/l431/Inc
    ; Use NEUTRON_L431 as default target for base L431 build
    -DNEUTRON_L431
    ; Define M_PI for mathematical calculations
    -DM_PI=3.14159265358979323846
build_src_filter = 
    ${src_filter_common.build_src_filter}
    +<../Mcu/l431/Src/*.c>
    +<../Mcu/l431/Startup/*.s>
    ; Exclude conflicting HAL driver files - use framework versions instead
    -<../Mcu/l431/Drivers/STM32L4xx_HAL_Driver/Src/>
    ; Exclude local system file that conflicts with framework version
    -<../Mcu/l431/Src/system_stm32l4xx.c>

; ============================================================================
; STM32F4xx Family (F415, F421)
; ============================================================================
[env:f415]
extends = env, src_filter_common
board = nucleo_f446re
build_flags = 
    ${env.build_flags}
    -DSTM32F415xx
    -DHSE_VALUE=8000000
    -DHSE_STARTUP_TIMEOUT=100
    -DLSE_STARTUP_TIMEOUT=5000
    -DLSE_VALUE=32768
    -DLSI_VALUE=32000
    -DHSI_VALUE=16000000
    -DUSE_FULL_LL_DRIVER
    -I Inc
    -I Mcu/f415/Inc
    ; Use TEKKO32_F415 as default target for base F415 build
    -DTEKKO32_F415
    ; Define M_PI for mathematical calculations
    -DM_PI=3.14159265358979323846
build_src_filter = 
    ${src_filter_common.build_src_filter}
    +<../Mcu/f415/Src/*.c>
    +<../Mcu/f415/Startup/*.s>
    ; Exclude conflicting HAL driver files - use framework versions instead
    -<../Mcu/f415/Drivers/STM32F4xx_HAL_Driver/Src/>
    ; Exclude local system file that conflicts with framework version
    -<../Mcu/f415/Src/system_stm32f4xx.c>

[env:f421]
extends = env, src_filter_common
board = nucleo_f446re
build_flags = 
    ${env.build_flags}
    -DSTM32F421xx
    -DHSE_VALUE=8000000
    -DHSE_STARTUP_TIMEOUT=100
    -DLSE_STARTUP_TIMEOUT=5000
    -DLSE_VALUE=32768
    -DLSI_VALUE=32000
    -DHSI_VALUE=16000000
    -DUSE_FULL_LL_DRIVER
    -I Inc
    -I Mcu/f421/Inc
    ; Use WRAITH32_F421 as default target for base F421 build
    -DWRAITH32_F421
    ; Define M_PI for mathematical calculations
    -DM_PI=3.14159265358979323846
build_src_filter = 
    ${src_filter_common.build_src_filter}
    +<../Mcu/f421/Src/*.c>
    +<../Mcu/f421/Startup/*.s>
    ; Exclude conflicting HAL driver files - use framework versions instead
    -<../Mcu/f421/Drivers/STM32F4xx_HAL_Driver/Src/>
    ; Exclude local system file that conflicts with framework version
    -<../Mcu/f421/Src/system_stm32f4xx.c>

; ============================================================================
; Target-specific builds (examples)
; ============================================================================
[env:f051_aikon20x20]
extends = env:f051
build_flags = 
    ${env:f051.build_flags}
    -DAIKON20X20
board_build.ldscript = Mcu/f051/STM32F051K6TX_FLASH.ld

[env:g071_pwm_enable]
extends = env:g071
build_flags = 
    ${env:g071.build_flags}
    -DPWM_ENABLE_G071

[env:f421_wraith32]
extends = env:f421
build_flags = 
    ${env:f421.build_flags}
    -DWRAITH32_F421

[env:l431_tbs]
extends = env:l431
build_flags = 
    ${env:l431.build_flags}
    -DTBS_L431

; ============================================================================
; Debug environments
; ============================================================================
[env:f051_debug]
extends = env:f051
build_type = debug
build_flags = 
    ${env:f051.build_flags}
    -DDEBUG
    -Og
debug_tool = stlink
debug_svd_path = Mcu/f051/STM32F0x1.svd

[env:g071_debug]
extends = env:g071
build_type = debug
build_flags = 
    ${env:g071.build_flags}
    -DDEBUG
    -Og
debug_tool = stlink

; ============================================================================
; AT32 Family (F415, F421) - ArteryTek AT32 MCUs
; ============================================================================

; Common AT32 base configuration
[at32_base]
platform = ststm32
; Don't use framework - AT32 has its own drivers
framework = 
; Use the STM32 toolchain but without framework
build_flags = 
    ${env.build_flags}
    ; AT32-specific defines
    -DUSE_STDPERIPH_DRIVER
    -DMCU_AT32
    ; Cortex-M4 without FPU (AT32 doesn't have FPU)
    -mcpu=cortex-m4
    -mthumb
    -mfloat-abi=soft

[env:at32f415]
extends = at32_base, src_filter_common
; Use a compatible board for toolchain settings
board = nucleo_f411re
board_build.mcu = at32f415k8u7_4
board_build.f_cpu = 144000000L
board_build.ldscript = Mcu/f415/ldscript.ld
build_flags = 
    ${at32_base.build_flags}
    -DAT32F415K8U7_4
    -DAT32DEV_F415
    -I Inc
    -I Mcu/f415/Inc
    -I Mcu/f415/Drivers/drivers/inc
    -I Mcu/f415/Drivers/CMSIS/cm4/core_support
    -I Mcu/f415/Drivers/CMSIS/cm4/device_support
    ; Define M_PI for mathematical calculations
    -DM_PI=3.14159265358979323846
build_src_filter = 
    ${src_filter_common.build_src_filter}
    +<../Mcu/f415/Src/*.c>
    ; Include AT32 startup file
    +<../Mcu/f415/Startup/startup_at32f415.s>
    ; Include AT32 drivers
    +<../Mcu/f415/Drivers/drivers/src/*.c>
    ; Exclude KISS telemetry in favor of SPORT telemetry
    -<../Src/kiss_telemetry.c>

[env:at32f421]
extends = at32_base, src_filter_common
; Use a compatible board for toolchain settings
board = nucleo_f411re
board_build.mcu = at32f421k8u7
board_build.f_cpu = 120000000L
board_build.ldscript = Mcu/f421/AT32F421x6_FLASH.ld
build_flags = 
    ${at32_base.build_flags}
    -DAT32F421K8U7
    -I Inc
    -I Mcu/f421/Inc
    -I Mcu/f421/Drivers/drivers/inc
    -I Mcu/f421/Drivers/CMSIS/cm4/core_support
    -I Mcu/f421/Drivers/CMSIS/cm4/device_support
    ; Define M_PI for mathematical calculations
    -DM_PI=3.14159265358979323846
build_src_filter = 
    ${src_filter_common.build_src_filter}
    +<../Mcu/f421/Src/*.c>
    ; Include AT32 startup file
    +<../Mcu/f421/Startup/startup_at32f421.s>
    ; Include AT32 drivers
    +<../Mcu/f421/Drivers/drivers/src/*.c>

; ============================================================================
; Testing environments
; ============================================================================
[env:native]
platform = native
test_framework = unity
build_flags = 
    -DUNIT_TEST
    -std=c99
test_filter = test_common
